-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/StadtLandFluss#readme</a>
@package StadtLandFluss
@version 0.1.0.0


-- | A Lib module.
module Lib

-- | Calculate the square of a number
square :: Num a => a -> a


-- | This module handles accessing the Bing Maps api to return Locations
--   for a given Query.
module MapApi

-- | Location describing a rest request result
data Location
Location :: String -> String -> String -> Location

-- | Name of the location found
[name] :: Location -> String

-- | Entitiy Type of the location (e.g. River)
[entityType] :: Location -> String

-- | how confident the Api was that this is the correct result (low, medium
--   or high)
[confidence] :: Location -> String

-- | Get a list of all matches for the given query string
getLocation :: String -> IO [Location]
instance GHC.Show.Show MapApi.Location


-- | This module contains the <a>Brain</a> of the Game. It allows input to
--   be checked using the MapApi Lib and it allows the scoring of answers.
module GameLogic

-- | Generates a random uppercase Char
getRandomChar :: IO Char

-- | Checks and scores a list of answers for the river type
checkRiver :: [String] -> IO [(Int, String)]

-- | Checks and scores a list of answers for the country type
checkCountry :: [String] -> IO [(Int, String)]

-- | Checks and scores a list of answers for the city type
checkCity :: [String] -> IO [(Int, String)]

-- | Evaluates how likely a given answer is to be correct and how many
--   points it should be worth Uses the Rest API to get all Locations
--   matching the Answer.
evaluateAnswer :: String -> [String] -> String -> IO (Int, String)

-- | Score a answer based on given locations
scoreAnswer :: String -> [Location] -> String -> [String] -> (Int, String)

-- | Filter a sorted List of locations for the best match in a given entity
--   Type
bestMatch :: String -> [Location] -> Maybe Location

-- | determine if Location type matches
isType :: String -> Location -> Bool

-- | Calculates a score multiplier for a given Answer 4: if only one non
--   empty answer was given. (No one else answered in that category) 2: The
--   answer is unique. (There where other answers, but not equal answers)
--   1: The answer was given multiple times. Note: Empty answers will get
--   score multipliers too, but since they will receive 0 points the
--   multiplier does not matter
calcBonusFactor :: String -> [String] -> Int
currentScores :: [Int]


-- | This module builds up the components and design of the GUI. The GUI is
--   build with the threepenny-gui library
--   (http:/<i>hackage.haskell.org</i>package/threepenny-gui) which uses
--   HTML like statements in haskell to build up a GUI in a browser window
--   which is hostet on localhost.
module GuiMain
guiMain :: IO ()

-- | Builds up the user window
setup :: Window -> UI ()

-- | This defines the content inside the user window
mkDisplay :: UI Element
